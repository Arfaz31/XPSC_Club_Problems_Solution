#include <bits/stdc++.h>
using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int t;
    cin >> t;

    while (t--)
    {
        long long n, k, q;
        cin >> n >> k >> q;

        vector<long long> a(n);
        for (int i = 0; i < n; i++)
            cin >> a[i];

        long long ans = 0; // total valid vacation ways
        long long len = 0; // current segment length

        for (int i = 0; i < n; i++)
        {
            if (a[i] <= q)
            {
                len++; // extend current valid segment
            }
            else
            {
                // segment break ‚Üí calculate valid subarrays if possible
                if (len >= k)
                {
                    long long x = len - k + 1;
                    ans += (x * (x + 1)) / 2;
                }
                len = 0; // reset segment
            }
        }

        if (len >= k)
        {
            long long x = len - k + 1;
            ans += (x * (x + 1)) / 2;
        }

        cout << ans << "\n";
    }

    return 0;
}

// üß© ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶ú‡¶æ‡¶®‡¶ø:

// Dima minimum k ‡¶¶‡¶ø‡¶® ski resort-‡¶è ‡¶Ø‡ßá‡¶§‡ßá ‡¶ö‡¶æ‡ßü‡•§
// ‡¶Æ‡¶æ‡¶®‡ßá ‡¶∏‡ßá k ‡¶¨‡¶æ ‡¶§‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø consecutive ‡¶¶‡¶ø‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá,
// ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ k-‡¶∞ ‡¶ö‡ßá‡ßü‡ßá ‡¶õ‡ßã‡¶ü segment valid ‡¶®‡¶æ‡•§

// a = [2, 1, 3, 8, 1, 1, 1]
// q = 3, k = 2

// ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ 3 ‡¶¶‡¶ø‡¶®: [2,1,3] ‡¶∏‡¶¨ ‚â§ 3
// ‚Üí len = 3

// ‡ß™‡¶∞‡ßç‡¶• ‡¶¶‡¶ø‡¶®‡ßá 8 ‡¶è‡¶∏‡ßá‡¶õ‡ßá (temperature > q)
// üëâ segment break ‡¶π‡ßü‡ßá‡¶õ‡ßá!

// ‡¶è‡¶ñ‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ segment [2,1,3]
// ‡¶è‡¶∞ length = 3, k = 2
// ‡¶§‡¶æ‡¶π‡¶≤‡ßá vacation ‡¶®‡ßá‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø subarrays:
// [2,1], [1,3], [2,1,3]
// ‚Üí ‡¶Æ‡ßã‡¶ü 3 ‡¶ü‡¶æ
// ‡¶è‡¶á ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶á formula ‡¶¶‡¶ø‡ßü‡ßá ‡¶™‡¶æ‡¶á:
// x = len - k + 1 = 3 - 2 + 1 = 2
// ans += (x * (x + 1)) / 2 = (2 * 3)/2 = 3 ‚úÖ

// ‡¶è‡¶∞‡¶™‡¶∞ len = 0 ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü,
// ‡¶ï‡¶æ‡¶∞‡¶£ ‡ßÆ ‡¶è‡¶∏‡ßá‡¶õ‡ßá ‚Äî ‡¶®‡¶§‡ßÅ‡¶® segment ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶¨‡ßá ‡¶è‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá‡•§

// üí° ‡¶§‡¶æ‡¶á condition if (len >= k) ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶≤‡ßã:

// ‡¶Ø‡¶¶‡¶ø segment ‡¶è‡¶∞ length ‡¶Ö‡¶®‡ßç‡¶§‡¶§ k ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ valid vacation ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡•§

// ‡¶Ü‡¶∞ ‡¶Ø‡¶¶‡¶ø len < k ‡¶π‡ßü ‚Üí ‡¶ì‡¶á segment ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ‡¶ì valid vacation ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨ ‡¶®‡ßü, ‡¶§‡¶æ‡¶á ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶≤‡¶æ‡¶ó‡¶¨‡ßá ‡¶®‡¶æ‡•§

// üß© ‡¶ï‡ßá‡¶® +1 ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞?

// ‡¶ß‡¶∞‡ßã ‡¶§‡ßÅ‡¶Æ‡¶ø len = k ‡¶®‡¶æ‡¶ì‡•§
// ‡¶§‡¶æ‡¶π‡¶≤‡ßá valid subarray ‡¶π‡¶¨‡ßá ‡¶†‡¶ø‡¶ï ‡¶è‡¶ï‡¶ü‡¶æ‡¶á (‡¶™‡ßÅ‡¶∞‡ßã segment ‡¶ü‡¶æ)‡•§

// ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶Æ‡¶∞‡¶æ formula ‡¶ü‡¶æ ‡¶≤‡¶ø‡¶ñ‡¶ø len - k,
// ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡¶æ‡¶¨ x = len - k = 0,
// ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶π‡¶¨‡ßá 0, ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ ‡¶Ü‡¶∏‡¶≤‡ßá ‡¶§‡ßã ‡ßß‡¶ü‡¶æ valid ‡¶Ü‡¶õ‡ßá!

// ‡¶§‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ +1 ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡ßü,
// ‡¶Ø‡¶æ‡¶§‡ßá ‡¶è‡¶Æ‡¶® case-‡¶è‡¶ì count ‡¶∏‡¶†‡¶ø‡¶ï ‡¶•‡¶æ‡¶ï‡ßá‡•§